//Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.
//According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 //better solution
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root.val<p.val&&root.val<q.val)
            return lowestCommonAncestor(root.right, p,q);
        if(root.val>p.val&&root.val>q.val)
            return lowestCommonAncestor(root.left, p,q);
        return root;
    }
}
 //first version solution
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root==null) return null;
        int returnValue=0;
        TreeNode leftNode=null;
        TreeNode rightNode=null;
        if(root.val>p.val&&root.val>q.val){
            leftNode=lowestCommonAncestor(root.left,p,q);
        }else if(root.val<p.val&&root.val<q.val){
            rightNode=lowestCommonAncestor(root.right,p,q);
        }else{
            leftNode=lowestCommonAncestor(root.left,p,q);
            rightNode=lowestCommonAncestor(root.right,p,q);
        }

        if(root==p || root ==q||leftNode==q&&rightNode==p||leftNode==p&&rightNode==q)
            return root;
        if(leftNode!=null)
            return leftNode;
        if(rightNode!=null)
            return rightNode;
        return null;
    }
}
